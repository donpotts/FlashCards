@page "/flashcarddecks"
@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@attribute [Authorize]

<PageTitle>Flash Card Decks</PageTitle>

<div class="mb-3">
    <MudText Typo="Typo.h3">Flash Card Decks</MudText>
</div>

<MudStack AlignItems="AlignItems.End" Class="mb-3">
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Primary" OnClick="@(e => OnAdd())">Add</MudButton>
</MudStack>

<!-- Begin cards -->
@if (FlashCardDecksResult != null)
{
    <MudText Class="mt-6 mb-3" Typo="Typo.h5">Decks</MudText>
    <MudGrid Class="mb-3">
        @foreach (var FlashCardDecks in FlashCardDecksResult.Value ?? Enumerable.Empty<FlashCardDecks>())
        {
            var thisFlashCardDecks = FlashCardDecks;
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="d-flex flex-column mud-height-full" @onclick="@(e => OnCardClick(FlashCardDecks))">
                    <MudCardContent>
                               @*  <MudText Typo="Typo.body2"><strong>Id:</strong> @FlashCardDecks.Id</MudText> *@
                        <MudText Typo="Typo.h3" style="text-align: center;">@FlashCardDecks.Name</MudText>

                    </MudCardContent>
                    <MudCardActions Class="mt-auto">
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(e => OnEdit(thisFlashCardDecks))">Edit</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(e => OnDelete(thisFlashCardDecks))">Delete</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    <div class="d-flex align-center justify-center mb-3">
        <MudPagination Color="Color.Primary" Count="pageCount" Selected="selectedPage" SelectedChanged="OnSelectedChangedAsync" />
    </div>
}

<!-- End cards -->

@code {
    // Begin cards
     private const int PageSize = 10;
     private AppService.ODataResult<FlashCardDecks>? FlashCardDecksResult;
     private int pageCount = 1;
     private int selectedPage = 1;

     protected override async Task OnInitializedAsync()
     {
         await ReloadDataAsync();
     }

     private async Task OnSelectedChangedAsync(int selected)
     {
         selectedPage = selected;
         await ReloadDataAsync();
     }

     private async Task ReloadDataAsync()
     {
         var skip = (selectedPage - 1) * PageSize;

         FlashCardDecksResult = await AppService.ListFlashCardDecksODataAsync(PageSize, skip, "", "", count: true, null);

         if (FlashCardDecksResult?.Count.HasValue ?? false)
         {
             pageCount = (int)Math.Ceiling((double)FlashCardDecksResult.Count.Value / PageSize);
         }
         else
         {
             pageCount = 1;
         }
         StateHasChanged();
     }
     // End cards

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    private async void OnAdd()
    {
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<AddFlashCardDecks>("Add FlashCardDecks", dialogOptions).Result;

        if (!result.Canceled)
        {
            await ReloadDataAsync();
        }
    }

    private async void OnEdit(FlashCardDecks record)
    {
        DialogParameters<UpdateFlashCardDecks> dialogParams = new() { { x => x.Id, record.Id!.Value } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<UpdateFlashCardDecks>("Update FlashCardDecks", dialogParams, dialogOptions).Result;

        if (!result.Canceled)
        {
            await ReloadDataAsync();
        }
    }

    private async void OnDelete(FlashCardDecks record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");

        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteFlashCardDecksAsync(record.Id!.Value);
                await ReloadDataAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    private void OnCardClick(FlashCardDecks record)
    {
        var deckId = record.Id;
        NavManager.NavigateTo($"/flashcards/{deckId}");
    }
}
